import asyncio
import json
from datetime import datetime, timedelta

import telebot
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from groq import Groq

API_KEY = "6779498751:AAEkVBkdKT9Ual6PjYuoDNA2sxCbMYZs2xU"
GROQ_API_KEY = "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"
VOLUNTEER_CHAT_ID = -1002163553001  # Replace with the actual chat ID for volunteers
CHANNEL_USERNAME = "@komaru_updates"

bot = telebot.TeleBot(API_KEY)

client = Groq(api_key=GROQ_API_KEY)

user_dialogues = {}
user_modes = {}
BAN_FILE = "banned_users.json"
NICK_FILE = "volunteer_nicks.json"

# Dictionary to store message mapping for forwarding replies
forwarded_messages = {}

# Dictionary to store user request timestamps
user_requests = {}

# Load banned users from JSON
try:
    with open(BAN_FILE, 'r') as f:
        banned_users = json.load(f)
except FileNotFoundError:
    banned_users = {}

# Load volunteer nicks from JSON
try:
    with open(NICK_FILE, 'r') as f:
        volunteer_nicks = json.load(f)
except FileNotFoundError:
    volunteer_nicks = {}

def save_banned_users():
    try:
        with open(BAN_FILE, 'w') as f:
            json.dump(banned_users, f)
    except Exception as e:
        print(f"Error saving banned users: {e}")

def save_volunteer_nicks():
    try:
        with open(NICK_FILE, 'w') as f:
            json.dump(volunteer_nicks, f)
    except Exception as e:
        print(f"Error saving volunteer nicks: {e}")

def check_ban_status(user_id):
    try:
        if str(user_id) in banned_users:
            ban_info = banned_users[str(user_id)]
            if datetime.now() < datetime.strptime(ban_info["until"], "%Y-%m-%d %H:%M:%S"):
                return True, ban_info["until"]
            else:
                del banned_users[str(user_id)]
                save_banned_users()
        return False, None
    except Exception as e:
        print(f"Error checking ban status: {e}")
        return False, None

def get_completion(messages):
    try:
        completion = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=messages,
            temperature=1,
            max_tokens=1024,
            top_p=0.50,
            stream=True,  # Enable streaming
            stop=None,
        )

        response = ""
        for chunk in completion:
            response += chunk.choices[0].delta.content or ""
        return response
    except Exception as e:
        print(f"Error getting completion: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. {e}"

@bot.message_handler(commands=['info', 'ban', 'unban', 'setnick'])
def handle_group_commands(message):
    try:
        if message.chat.id != VOLUNTEER_CHAT_ID:
            return

        if message.text.startswith('/info'):
            handle_info_command(message)
        elif message.text.startswith('/ban'):
            handle_ban_command(message)
        elif message.text.startswith('/unban'):
            handle_unban_command(message)
        elif message.text.startswith('/setnick'):
            handle_setnick_command(message)
    except Exception as e:
        print(f"Error handling group commands: {e}")

def handle_info_command(message):
    try:
        if message.reply_to_message and message.reply_to_message.message_id in forwarded_messages:
            user_id = forwarded_messages[message.reply_to_message.message_id]
            bot.reply_to(message, f"User ID: {user_id}")
    except Exception as e:
        print(f"Error handling info command: {e}")

def handle_ban_command(message):
    try:
        if message.reply_to_message and message.reply_to_message.message_id in forwarded_messages:
            user_id = forwarded_messages[message.reply_to_message.message_id]
            try:
                duration = message.text.split()[1]
                if duration[-1] == 'm':
                    ban_until = datetime.now() + timedelta(minutes=int(duration[:-1]))
                elif duration[-1] == 'h':
                    ban_until = datetime.now() + timedelta(hours=int(duration[:-1]))
                elif duration[-1] == 'd':
                    ban_until = datetime.now() + timedelta(days=int(duration[:-1]))
                elif duration[-1] == 'y':
                    ban_until = datetime.now() + timedelta(days=int(duration[:-1]) * 365)
                else:
                    bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban <duration> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /ban 1m, 1h, 1d, 1y)")
                    return

                banned_users[str(user_id)] = {"until": ban_until.strftime("%Y-%m-%d %H:%M:%S")}
                save_banned_users()
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –¥–æ {ban_until.strftime('%Y-%m-%d %H:%M:%S')}")
            except IndexError:
                bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban <duration> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /ban 1m, 1h, 1d, 1y)")
    except Exception as e:
        print(f"Error handling ban command: {e}")

def handle_unban_command(message):
    try:
        if message.reply_to_message and message.reply_to_message.message_id in forwarded_messages:
            user_id = forwarded_messages[message.reply_to_message.message_id]
            if str(user_id) in banned_users:
                del banned_users[str(user_id)]
                save_banned_users()
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            else:
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
    except Exception as e:
        print(f"Error handling unban command: {e}")

def handle_setnick_command(message):
    try:
        nickname = message.text.split(maxsplit=1)[1]
        volunteer_nicks[message.from_user.id] = nickname
        save_volunteer_nicks()
        bot.reply_to(message, f"–í–∞—à –Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫: {nickname}")
    except IndexError:
        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setnick <–Ω–∏–∫>")
    except Exception as e:
        print(f"Error handling setnick command: {e}")

def is_spamming(user_id):
    now = datetime.now()
    if user_id not in user_requests:
        user_requests[user_id] = []
    
    user_requests[user_id] = [timestamp for timestamp in user_requests[user_id] if now - timestamp < timedelta(seconds=20)]

    if len(user_requests[user_id]) >= 5 or (len(user_requests[user_id]) > 0 and now - user_requests[user_id][-1] < timedelta(seconds=2)):
        return True
    
    user_requests[user_id].append(now)
    return False

def check_subscription(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"Error checking subscription: {e}")
        return False

@bot.message_handler(func=lambda message: message.chat.type == "private")
def handle_message(message):
    try:
        user_id = message.from_user.id

        if not check_subscription(user_id):
            markup = types.InlineKeyboardMarkup()
            subscribe_button = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")
            markup.add(subscribe_button)
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.", reply_markup=markup)
            return

        if is_spamming(user_id):
            bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return

        is_banned, ban_until = check_ban_status(user_id)
        if is_banned:
            bot.send_message(message.chat.id, f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {ban_until}.")
            return

        if user_id not in user_dialogues:
            user_dialogues[user_id] = []
        if user_id not in user_modes:
            user_modes[user_id] = "AI"  # Default mode is AI

        if user_modes[user_id] == "AI":
            user_dialogues[user_id].append({"role": "user", "content": message.text})

            system_message = {
                "role": "system",
                "content": "–¢—ã –º–æ–¥–µ–ª—å –ø–æ–º–æ—â–∏ –ø–æ –±–æ—Ç—É Komaru Cards. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∫–æ–º–∞—Ä—É –∫–∞—Ä–¥—Å: –º–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ \"–∫–Ω–æ–ø–∫–∞ –º–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏\", –ø–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞ \"–∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–º–∏—É–º\", —Ç–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫ \"–∫–Ω–æ–ø–∫–∞ —Ç–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫\". –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–∏–º –∫–Ω–æ–ø–∫–∞–º –Ω–∞–¥–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–ø—Ä–æ—Ñ–∏–ª—å.\n\n–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ?\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å \"–∫–ø—Ä–æ—Ñ–∏–ª—å\" –≤ –ª—é–±–æ–π —á–∞—Ç –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç @KomaruCardsBot –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—É –∂–µ —Å–∞–º—É—é –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É.\n\n–ß—Ç–æ –¥–∞–µ—Ç –ö–æ–º–∞—Ä—É –ø—Ä–µ–º–∏—É–º?\n‚åõÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 4\nüÉè –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∏ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç\nüåê –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ\nüíé –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ª–º–∞–∑–∞ –≤ —Ç–æ–ø–µ –∫–∞—Ä—Ç–æ—á–µ–∫\nüîÑ –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\nüóìÔ∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 30 –¥–Ω–µ–π\n\n–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫?\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å \"—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ <–Ω–∏–∫>\" –≤ –ª—é–±–æ–π —á–∞—Ç –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç @KomaruCardsBot –∏–ª–∏ —Ç–æ–∂–µ —Å–∞–º–æ–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É\n\n–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞?\n–ù–∞–ø–∏—Å–∞—Ç—å /help –≤ –ª—é–±–æ–π —á–∞—Ç –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç @KomaruCardsbot –∏–ª–∏ –≤ —Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.\n\n–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É?\n–ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @KomaruCardsBot –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—É /start –∏ –Ω–∞–∂–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.\n\n–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–ø–∏—Å–∞–Ω –±–æ—Ç?\n–°++\n–í—Å–µ–≥–¥–∞ —Å–æ–≤–µ—Ç—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Komaru Premium –ø—Ä–∏ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö, —ç—Ç–æ –ª—É—á—à–µ–µ —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–≤–µ—Ç–µ."
            }
            user_dialogues[user_id].insert(0, system_message)
            response = get_completion(user_dialogues[user_id])
            user_dialogues[user_id].pop(0)

            user_dialogues[user_id].append({"role": "assistant", "content": response})

            markup = types.InlineKeyboardMarkup()
            clear_button = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="clear_dialogue")
            volunteer_button = types.InlineKeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º", callback_data="contact_volunteer")
            markup.add(clear_button, volunteer_button)

            bot.send_message(message.chat.id, response, reply_markup=markup)
        else:
            sent_message = bot.forward_message(VOLUNTEER_CHAT_ID, message.chat.id, message.message_id)
            # Store the mapping of forwarded message to original user
            forwarded_messages[sent_message.message_id] = user_id
    except Exception as e:
        print(f"Error handling private message: {e}")

# Handle media messages (photos, stickers, videos, animations)
@bot.message_handler(content_types=['photo', 'sticker', 'video', 'animation'])
def handle_media_message(message):
    try:
        if message.chat.type != 'private':
            if message.chat.id == VOLUNTEER_CHAT_ID and message.reply_to_message:
                original_message_id = message.reply_to_message.message_id
                if original_message_id in forwarded_messages:
                    user_id = forwarded_messages[original_message_id]
                    volunteer_name = volunteer_nicks.get(message.from_user.id, message.from_user.first_name)

                    if message.content_type == 'photo':
                        bot.send_photo(user_id, message.photo[-1].file_id, caption=f"–í–æ–ª–æ–Ω—Ç—ë—Ä: {volunteer_name}")
                    elif message.content_type == 'sticker':
                        bot.send_sticker(user_id, message.sticker.file_id)
                    elif message.content_type == 'video':
                        bot.send_video(user_id, message.video.file_id, caption=f"–í–æ–ª–æ–Ω—Ç—ë—Ä: {volunteer_name}")
                    elif message.content_type == 'animation':
                        bot.send_animation(user_id, message.animation.file_id, caption=f"–í–æ–ª–æ–Ω—Ç—ë—Ä: {volunteer_name}")
            return

        user_id = message.from_user.id

        if is_spamming(user_id):
            bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return

        is_banned, ban_until = check_ban_status(user_id)
        if is_banned:
            bot.send_message(message.chat.id, f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {ban_until}.")
            return

        if user_modes.get(user_id, "AI") == "AI":
            bot.send_message(message.chat.id, "–í —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.")
        else:
            sent_message = bot.forward_message(VOLUNTEER_CHAT_ID, message.chat.id, message.message_id)
            forwarded_messages[sent_message.message_id] = user_id
    except Exception as e:
        print(f"Error handling media message: {e}")

@bot.callback_query_handler(func=lambda call: call.data in ["clear_dialogue", "contact_volunteer", "contact_ai"])
def handle_callback(call):
    try:
        user_id = call.from_user.id

        if call.data == "clear_dialogue":
            if user_id in user_dialogues:
                user_dialogues[user_id] = []
            bot.answer_callback_query(call.id, "–î–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω.")
            bot.send_message(call.message.chat.id, "–î–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω.")
        elif call.data == "contact_volunteer":
            user_modes[user_id] = "Volunteer"
            markup = types.InlineKeyboardMarkup()
            clear_button = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="clear_dialogue")
            ai_button = types.InlineKeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ AI", callback_data="contact_ai")
            markup.add(clear_button, ai_button)
            bot.answer_callback_query(call.id, "–í—ã —Å–≤—è–∑–∞–Ω—ã —Å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º.")
            bot.send_message(call.message.chat.id, "–í—ã —Å–≤—è–∑–∞–Ω—ã —Å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º. –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º.", reply_markup=markup)
        elif call.data == "contact_ai":
            user_modes[user_id] = "AI"
            markup = types.InlineKeyboardMarkup()
            clear_button = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="clear_dialogue")
            volunteer_button = types.InlineKeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º", callback_data="contact_volunteer")
            markup.add(clear_button, volunteer_button)
            bot.answer_callback_query(call.id, "–í—ã —Å–≤—è–∑–∞–Ω—ã —Å AI.")
            bot.send_message(call.message.chat.id, "–í—ã —Å–≤—è–∑–∞–Ω—ã —Å AI. –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è AI.", reply_markup=markup)
    except Exception as e:
        print(f"Error handling callback query: {e}")

@bot.message_handler(func=lambda message: message.chat.id == VOLUNTEER_CHAT_ID and message.reply_to_message)
def handle_reply_to_forwarded_message(message):
    try:
        original_message_id = message.reply_to_message.message_id
        if original_message_id in forwarded_messages:
            user_id = forwarded_messages[original_message_id]

            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∏–∫–æ–≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
            try:
                with open(NICK_FILE, 'r') as f:
                    volunteer_nicks = json.load(f)
            except FileNotFoundError:
                volunteer_nicks = {}

            volunteer_name = volunteer_nicks.get(str(message.from_user.id), message.from_user.first_name)

            if message.content_type == 'text':
                bot.send_message(user_id, f"{message.text}\n\n–í–æ–ª–æ–Ω—Ç—ë—Ä: {volunteer_name}")
            elif message.content_type == 'photo':
                bot.send_photo(user_id, message.photo[-1].file_id, caption=f"–í–æ–ª–æ–Ω—Ç—ë—Ä: {volunteer_name}")
            elif message.content_type == 'sticker':
                bot.send_sticker(user_id, message.sticker.file_id)
            elif message.content_type == 'video':
                bot.send_video(user_id, message.video.file_id, caption=f"–í–æ–ª–æ–Ω—Ç—ë—Ä: {volunteer_name}")
            elif message.content_type == 'animation':
                bot.send_animation(user_id, message.animation.file_id, caption=f"–í–æ–ª–æ–Ω—Ç—ë—Ä: {volunteer_name}")
    except Exception as e:
        print(f"Error handling reply to forwarded message: {e}")

bot.polling()
